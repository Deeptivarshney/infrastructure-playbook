---
- name: Create a systemd-nspawn container aimed at running a second HTCondor installation.
  hosts: htcondor-secondary-submit-host
  handlers:
    - name: Reload sshd  # (in the container)
      when: nspawn_ssh | default(no)
      become: true
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: "systemd-run --pipe --machine {{ nspawn_name }} /bin/systemctl reload sshd"
      changed_when: true
  vars_files:
    - mounts/mountpoints.yml
    - secret_group_vars/htcondor-secondary-submit-host.yml
  pre_tasks:
    # Because it is already disabled for sn06 and this setup is needed just
    # temporarily.
    - name: Disable SELinux.
      become: true
      ansible.posix.selinux:
        state: disabled
  roles:
    - kysrpex.systemd_nspawn
  post_tasks:
    - name: Configure the container's sshd.
      when: nspawn_ssh and (nspawn_ssh_config is defined or nspawn_ssh_config_path is defined)
      become: true
      block:
        - name: Get the location of the container image.
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              set -o pipefail
              machinectl image-status htcondor | grep "Path: " | awk '{$1=$1};1' | cut -d' ' -f2
          register: nspawn_image
          changed_when: false

        - name: Write the sshd configuration to sshd_config.
          ansible.builtin.lineinfile:
            path: "{{ (nspawn_image.stdout, nspawn_ssh_config_path | regex_replace('(\\/*)?(.*)', '\\2')) | path_join }}"
            regexp: '^\s*(?:#)?\s*{{ item.key | regex_escape() }}'
            line: "{{ item.key }} {{ item.value }}"
          with_dict: "{{ nspawn_ssh_config }}"
          notify: Reload sshd

        - name: Replace ssh host keys (private).
          when: nspawn_ssh_host_keys is defined and nspawn_ssh_host_keys_private is defined
          ansible.builtin.copy:
            dest: "{{ (nspawn_image.stdout, nspawn_ssh_config_path | regex_replace('(\\/*)?(.*)', '\\2') | dirname, 'ssh_host_' + item.key + '_key') | path_join }}"
            content: "{{ item.value }}"
            mode: "0600"
          with_dict: "{{ nspawn_ssh_host_keys_private }}"
          notify: Reload sshd

        - name: Replace ssh host keys (public).
          when: nspawn_ssh_host_keys is defined and nspawn_ssh_host_keys_private is defined
          ansible.builtin.copy:
            dest: "{{ (nspawn_image.stdout, nspawn_ssh_config_path | regex_replace('(\\/*)?(.*)', '\\2') | dirname, 'ssh_host_' + item.key + '_key.pub') | path_join }}"
            content: "{{ item.value }}"
            mode: "0644"
          with_dict: "{{ nspawn_ssh_host_keys }}"
          notify: Reload sshd

        - name: Replace ssh host keys (certs).
          when: nspawn_ssh_host_keys is defined and nspawn_ssh_host_keys_private is defined and nspawn_ssh_host_certs is defined
          ansible.builtin.copy:
            dest: "{{ (nspawn_image.stdout, nspawn_ssh_config_path | regex_replace('(\\/*)?(.*)', '\\2') | dirname, 'ssh_host_' + item.key + '_key-cert.pub') | path_join }}"
            content: "{{ item.value }}"
            mode: "0644"
          with_dict: "{{ nspawn_ssh_host_certs }}"
          notify: Reload sshd

        - name: Add certs to sshd_config.
          when: nspawn_ssh_host_keys is defined and nspawn_ssh_host_keys_private is defined and nspawn_ssh_host_certs is defined
          ansible.builtin.lineinfile:
            path: "{{ (nspawn_image.stdout, nspawn_ssh_config_path | regex_replace('(\\/*)?(.*)', '\\2')) | path_join }}"
            regexp: '^\s*(?:#)?\s*HostCertificate\s+.*ssh_host_{{ item.key }}_key-cert.pub'
            line: "HostCertificate {{ nspawn_ssh_config_path | dirname }}/ssh_host_{{ item.key }}_key-cert.pub"
          with_dict: "{{ nspawn_ssh_host_certs }}"
          notify: Reload sshd

        - name: Ensure the ssh configuration directory exists (for root).
          when: nspawn_ssh_authorized_keys is defined
          ansible.builtin.file:
            path: "{{ (nspawn_image.stdout, '/root/.ssh' | regex_replace('(\\/*)?(.*)', '\\2')) | path_join }}"
            state: directory
            owner: root
            group: root
            mode: "0700"

        - name: Ensure the authorized_keys file exists (for root).
          when: nspawn_ssh_authorized_keys is defined
          ansible.builtin.file:
            path: "{{ (nspawn_image.stdout, '/root/.ssh/authorized_keys' | regex_replace('(\\/*)?(.*)', '\\2')) | path_join }}"
            state: touch
            owner: root
            group: root
            mode: "0600"

        - name: Authorize specific users log-in as root.
          when: nspawn_ssh_authorized_keys is defined
          ansible.builtin.lineinfile:
            path: "{{ (nspawn_image.stdout, '/root/.ssh/authorized_keys' | regex_replace('(\\/*)?(.*)', '\\2')) | path_join }}"
            regexp: '^\s*(?:#)?\s*{{ item | regex_escape() }}'
            line: "{{ item }}"
          loop: "{{ nspawn_ssh_authorized_keys }}"

    - name: Enable and start the container.
      become: true
      block:
        - name: Enable the container.
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "machinectl enable {{ nspawn_name }}"
          register: nspawn_container_enable
          changed_when: nspawn_container_enable.rc == 0 and nspawn_container_enable.stderr != ''

        - name: Check if the container is already running.
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "machinectl show {{ nspawn_name }} -p State --value"
          register: nspawn_status
          changed_when: false
          failed_when: false

        - name: Start the container.
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "machinectl start {{ nspawn_name }}"
          register: nspawn_container_enable
          changed_when: nspawn_status.stdout != 'running'

    - name: Enable and start sshd in the container.
      when: nspawn_ssh | default(no)
      become: true
      block:
        - name: Check if sshd is enabled in the container.
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "systemd-run --pipe --machine {{ nspawn_name }} /bin/systemctl is-enabled sshd"
          register: nspawn_ssh_enabled
          changed_when: false
          failed_when: false

        - name: Enable sshd in the container.
          become: true
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "systemd-run --pipe --machine {{ nspawn_name }} /bin/systemctl enable sshd"
          changed_when: nspawn_ssh_enabled.rc != 0

        - name: Check if sshd is active in the container.
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "systemd-run --pipe --machine {{ nspawn_name }} /bin/systemctl is-active sshd"
          register: nspawn_ssh_active
          changed_when: false
          failed_when: false

        - name: Start sshd in the container.
          become: true
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: "systemd-run --pipe --machine {{ nspawn_name }} /bin/systemctl start sshd"
          changed_when: nspawn_ssh_active.rc != 0

    - name: Read the container's host key.
      become: true
      ansible.builtin.slurp:
        src: "{{ (nspawn_image.stdout, '/etc/ssh/ssh_host_ecdsa_key.pub' | regex_replace('(\\/*)?(.*)', '\\2')) | path_join }}"
      register: nspawn_ssh_host_key
      when: nspawn_ssh_host_trust_container

    - name: Trust the container's host key.
      ansible.builtin.known_hosts:
        name: "[127.0.0.1]:{{ nspawn_ssh_config.Port }}"
        key: "[127.0.0.1]:{{ nspawn_ssh_config.Port }} {{ nspawn_ssh_host_key.content | b64decode }}"
      when: nspawn_ssh_host_trust_container

    - name: Allow the Galaxy user to run HTCondor commands in the container.
      # Uses /etc/sudoers. Ideally this would be solved using what is requested
      # in this issue https://github.com/systemd/systemd/issues/10997, but the
      # issue is still open.
      community.general.sudoers:
        name: htcondor-nspawn
        user: "{{ galaxy_user.name }}"
        nopassword: true
        validation: required
        setenv: true
        commands:
          - "{{ nspawn_condor_rm_command }} *"
          - "{{ nspawn_condor_ssh_to_job_command }} *"
          - "{{ nspawn_condor_submit_command }} *"

- name: HTCondor cluster.
  hosts: htcondor:!sn06.galaxyproject.eu
  handlers:
    - name: Reload HTCondor
      when: "'condor_service' in service_facts.ansible_facts.services and \
        service_facts.ansible_facts.services['condor.service'].state == 'running'"
      become: true
      ansible.builtin.service:
        name: condor
        state: reloaded
  pre_tasks:
    - name: Ensure findutils is installed.
      become: true
      ansible.builtin.package:
        name: findutils
        state: installed

    - name: Ensure the HTCondor configuration directory exists.
      become: true
      ansible.builtin.file:
        path: /etc/condor
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Template HTCondor configuration.
      become: true
      ansible.builtin.template:
        src: htcondor/condor_config.local.j2
        dest: /etc/condor/condor_config.local
        owner: root
        group: root
        mode: "0644"
      notify: Reload HTCondor

    - name: Open HTCondor shared port in the firewall.
      ansible.posix.firewalld:
        port: "{{ htcondor_port }}/tcp"
        state: enabled
        permanent: true
        immediate: true
      when: inventory_hostname != "nspawn-htcondor.sn06.galaxyproject.eu"

    - name: Check if HTCondor is running.
      ansible.builtin.service_facts:
      register: service_facts
  roles:
    - usegalaxy_eu.handy.os_setup
    - grycap.htcondor
